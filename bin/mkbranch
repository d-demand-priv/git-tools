#!/bin/bash

TICKET_TYPE=""
TICKET_ID=""
BRANCH_DESCRIPTION=""
BRANCH_SUFFIX=""

#############################################################

HEIGHT=20
WIDTH=120
CHOICE_HEIGHT=9
BACKTITLE="Branch Helper"
TITLE="Branch Helper"

#############################################################

MENU="Choose what kind of branch you want to create:"

OPTIONS=(1 "Feature Branch"
         2 "Dev Branch"
         3 "Hotfix Branch")

CHOICE=$(dialog --clear \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --menu "$MENU" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)

clear
case $CHOICE in
        1)
            BRANCH_SUFFIX="main"
            ;;
        2)
            echo -n "Enter your 3 letter lower-case username (e.g. tvk, mwm, ofi, kho, ...): "
            read -e BRANCH_SUFFIX

            if ! [[ "${BRANCH_SUFFIX}" =~ ^[a-z][a-z][a-z]$ ]]; then
                echo "ERROR: Invalid 3-letter username!"
                exit 1
            fi
            ;;
        3)
            BRANCH_SUFFIX="hotfix"
            ;;
        *)
            exit 1
            ;;
esac

if [[ "${BRANCH_SUFFIX}" == "main" ]] || [[ "${BRANCH_SUFFIX}" == "hotfix" ]]; then
    read -e -p "Would you like to checkout and pull the latest develop branch first? (Y/n)" -n 1 -r
    if [[ ! $REPLY =~ ^[Nn]$ ]]; then
        git checkout develop || bash -c 'echo "ERROR: Failed to checkout develop" && exit 1'
        git pull || bash -c 'echo "ERROR: Failed to pull develop" && exit 1'
    fi
fi

#############################################################

MENU="Choose the ticket type:"

OPTIONS=(1 "fix: A bug fix"
         2 "feat: A new feature"
         3 "refactor: A code change that neither fixes a bug nor adds a feature"
         4 "test: Adding missing tests or correcting existing tests"
         5 "build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)"
         6 "docs: Documentation only changes"
         7 "ci: Changes to our CI configuration files and scripts (example scopes: Circle, BrowserStack, SauceLabs)"
         8 "style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"
         9 "perf: A code change that improves performance")

CHOICE=$(dialog --clear \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --menu "$MENU" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)

clear
case $CHOICE in
        1)
            TICKET_TYPE="fix"
            ;;
        2)
            TICKET_TYPE="feat"
            ;;
        3)
            TICKET_TYPE="refactor"
            ;;
        4)
            TICKET_TYPE="test"
            ;;
        5)
            TICKET_TYPE="build"
            ;;
        6)
            TICKET_TYPE="docs"
            ;;
        7)
            TICKET_TYPE="ci"
            ;;
        8)
            TICKET_TYPE="style"
            ;;
        9)
            TICKET_TYPE="perf"
            ;;
        *)
            exit 1
            ;;
esac

###################################################################

echo -n "Enter the Jira Ticket ID: CCS-"
read -e TICKET_ID
TICKET_ID="CCS-${TICKET_ID}"

if ! [[ "${TICKET_ID}" =~ ^CCS-[0-9]+$ ]]; then
    echo "ERROR: Invalid Ticket ID. Ticket IDs must match with this regex format /^CCS-\d+$/"
    exit 1
fi

###################################################################

echo -n "Enter a description for your branch (only lower-case letters, numbers and dashes): "
read -e BRANCH_DESCRIPTION

if ! [[ "${BRANCH_DESCRIPTION}" =~ ^[a-z0-9-]+$ ]]; then
    echo "ERROR: Invalid branch description. branch descriptions can only contain letters, numbers and dashes (-)."
    exit 1
fi

###################################################################

BRANCH_NAME="${TICKET_TYPE}/${TICKET_ID}/${BRANCH_DESCRIPTION}/${BRANCH_SUFFIX}"

read -e -p "Your branch name is '${BRANCH_NAME}', would you like to create it now? (Y/n)" -n 1 -r
if [[ ! $REPLY =~ ^[Nn]$ ]]; then
    # Check if repository has commits
    if git rev-parse --verify HEAD >/dev/null 2>&1; then
        # Repository has commits
        # Get current branch as starting point
        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        
        # Create branch from current branch
        git branch "${BRANCH_NAME}" "${CURRENT_BRANCH}" || bash -c 'echo "ERROR: Failed to create branch" && exit 1'
    else
        # Repository has no commits
        echo "Repository has no commits yet. Creating an initial commit first..."
        
        # Create an empty commit
        read -e -p "Would you like to create an initial commit? (Y/n)" -n 1 -r
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            git commit --allow-empty -m "Initial commit" || bash -c 'echo "ERROR: Failed to create initial commit" && exit 1'
            
            # Now create the branch
            git branch "${BRANCH_NAME}" || bash -c 'echo "ERROR: Failed to create branch" && exit 1'
        else
            echo "Cannot create a branch without at least one commit in the repository."
            exit 1
        fi
    fi
else
    exit 1
fi

read -e -p "Would you like to check the branch out now? (Y/n)" -n 1 -r
if [[ ! $REPLY =~ ^[Nn]$ ]]; then
    git checkout "${BRANCH_NAME}" || bash -c 'echo "ERROR: Failed to checkout new branch" && exit 1'
else
    exit 1
fi
